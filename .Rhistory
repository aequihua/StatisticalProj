nosim=1000
x = rexp(nosim,lambda)
hist(x)
lambda=0.2
x = rexp(nosim,lambda)
hist(x)
qplot(x)
library(ggplot2)
qplot(x)
ggplot(x)+geom_histogram()
qplot(x,alpha = .20, binwidth=.3, colour = "black")
qplot(x, geom="histogram", binwidth=.3, colour = "black")
qplot(x, geom="histogram", binwidth=5, main="Grafica")
qplot(x, geom="histogram", binwidth=5,
main="Exponential random value distribution",
xlab="Value of X", ylab="density",
fill=I("blue"))
qplot(x, geom="histogram", binwidth=5,
main="Exponential random value distribution",
xlab="Value of X", ylab="density",
fill=I("blue"), col=I("black"))
nosim <- 1000
n <- 40
mfunc <- function(x, n) mean(x)
dat <- data.frame(
x = c(apply(matrix(rexp(nosim*n,lambda),
nosim), 1, mfunc, n)
),
size = factor(rep(c(n), rep(nosim, 1))))
nosim <- 1000
n <- 40
mfunc <- function(x, n) mean(x)
Xbardat <- data.frame(
x = c(apply(matrix(rexp(nosim*n,lambda),
nosim), 1, mfunc, n)
),
size = factor(rep(c(n), rep(nosim, 1))))
g <- ggplot(xbardat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
nosim <- 1000
n <- 40
mfunc <- function(x, n) mean(x)
Xbardat <- data.frame(
x = c(apply(matrix(rexp(nosim*n,lambda),
nosim), 1, mfunc, n)
),
size = factor(rep(c(n), rep(nosim, 1))))
g <- ggplot(Xbardat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
nosim <- 1000
n <- 40
mfunc <- function(x, n) mean(x)
Xbardat <- data.frame(
x = c(apply(matrix(rexp(nosim*n,lambda),
nosim), 1, mfunc, n)
),
size = factor(rep(c(n), rep(nosim, 1))))
g <- ggplot(Xbardat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + geom_density(alpha=.2, fill="#FF6666")
g + facet_grid(. ~ size)
?var
nosim <- 1000
n <- 40
mfunc <- function(x, n) var(x)
Xbardat <- data.frame(
x = c(apply(matrix(rexp(nosim*n,lambda),
nosim), 1, mfunc, n)
),
size = factor(rep(c(n), rep(nosim, 1))))
g <- ggplot(Xbardat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + geom_density(alpha=.2, fill="#FF6666")
g + facet_grid(. ~ size)
nosim <- 1000
n <- 40
vfunc <- function(x, n) var(x)
Xvardat <- data.frame(
x = c(apply(matrix(rexp(nosim*n,lambda),
nosim), 1, vfunc, n)
),
size = factor(rep(c(n), rep(nosim, 1))))
g <- ggplot(Xvardat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + geom_density(alpha=.2, fill="#FF6666")
g + facet_grid(. ~ size)
nosim <- 1000
n <- 40
mfunc <- function(x, n) mean(x)
Xbardat <- data.frame(
x = c(apply(matrix(rexp(nosim*n,lambda),
nosim), 1, mfunc, n)
),
size = factor(rep(c(n), rep(nosim, 1))))
g <- ggplot(Xbardat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + geom_density(alpha=.2, fill="#FF6666")
g + facet_grid(. ~ size)
nosim <- 1000
n <- 40
vfunc <- function(x, n) var(x)
Xvardat <- data.frame(
x = c(apply(matrix(rexp(nosim*n,lambda),
nosim), 1, vfunc, n)
),
size = factor(rep(c(n), rep(nosim, 1))))
g <- ggplot(Xvardat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g
nosim <- 1000
n <- 40
vfunc <- function(x, n) var(x)
Xvardat <- data.frame(
x = c(apply(matrix(rexp(nosim*n,lambda),
nosim), 1, vfunc, n)
),
size = factor(rep(c(n), rep(nosim, 1))))
g <- ggplot(Xvardat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=1, colour = "black", aes(y = ..density..))
g <- g + geom_density(alpha=.2, fill="#FF6666")
g + facet_grid(. ~ size)
# Do the simulation of the variance of 1000 samples size n=40
nosim <- 1000
n <- 40
vfunc <- function(x, n) var(x)
Xvardat <- data.frame(
x = c(apply(matrix(rexp(nosim*n,lambda),
nosim), 1, vfunc, n)
),
size = factor(rep(c(n), rep(nosim, 1))))
g <- ggplot(Xvardat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=1, colour = "black", aes(y = ..density..))
g <- g + geom_density(alpha=.2, fill="#FF6666")
g <- g + geom_vline(aes(xintercept=mean(sdexp^2, na.rm=T)),
color="red", linetype="dashed", size=1)
g + facet_grid(. ~ size)
# Simulation of CLT
lambda <- 0.2
# Theoretical mean and sd of the population
muexp <- 1 / lambda
sdexp <- 1 / lambda
# Do the simulation of the random 1000 exponentials
exps = rexp(nosim,lambda)
qplot(x, geom="histogram", binwidth=5,
main="Exponential random value distribution",
xlab="Value of X", ylab="density",
fill=I("blue"), col=I("black"))
# Do the simulation of the average of 1000 samples size n=40
nosim <- 1000
n <- 40
mfunc <- function(x, n) mean(x)
Xbardat <- data.frame(
x = c(apply(matrix(rexp(nosim*n,lambda),
nosim), 1, mfunc, n)
),
size = factor(rep(c(n), rep(nosim, 1))))
g <- ggplot(Xbardat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + geom_density(alpha=.2, fill="#FF6666")
g <- g + geom_vline(aes(xintercept=mean(muexp, na.rm=T)),
color="red", linetype="dashed", size=1)
g + facet_grid(. ~ size)
# Do the simulation of the variance of 1000 samples size n=40
nosim <- 1000
n <- 40
vfunc <- function(x, n) var(x)
Xvardat <- data.frame(
x = c(apply(matrix(rexp(nosim*n,lambda),
nosim), 1, vfunc, n)
),
size = factor(rep(c(n), rep(nosim, 1))))
g <- ggplot(Xvardat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=1, colour = "black", aes(y = ..density..))
g <- g + geom_density(alpha=.2, fill="#FF6666")
g <- g + geom_vline(aes(xintercept=mean(sdexp^2, na.rm=T)),
color="red", linetype="dashed", size=1)
g + facet_grid(. ~ size)
# Prepare the simulation of sample averages of size n=40
nosim <- 1000
n <- 40
cfunc <- function(x, n) sqrt(n) * (mean(x) - muexp) / musd
XbarNormdat <- data.frame(
x = c(apply(matrix(rexp(nosim*n,lambda),
nosim), 1, cfunc, n)
),
size = factor(rep(c(n), rep(nosim, 1))))
g <- ggplot(XbarNormdat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2) g + facet_grid(. ~ size)
source('r/exercise01.r')
source('r/exercise01.r')
source('r/exercise01.r')
source('r/exercise01.r')
source('r/exercise01.r')
XbarMean = mean(Xbardat$x)
# Do the simulation of the average of 1000 samples size n=40
nosim <- 1000
n <- 40
Xbardat <- data.frame(
x = c(apply(matrix(rexp(nosim*n,lambda),
nosim), 1, mean)
),
size = factor(rep(c(n), rep(nosim, 1))))
XbarMean = mean(Xbardat$x)
print(Xbarmean)
print(muexp)
# Do the simulation of the average of 1000 samples size n=40
nosim <- 1000
n <- 40
Xbardat <- data.frame(
x = c(apply(matrix(rexp(nosim*n,lambda),
nosim), 1, mean)
),
size = factor(rep(c(n), rep(nosim, 1))))
XbarMean = mean(Xbardat$x)
print(XbarMean)
print(muexp)
nosim <- 1000
n <- 40
Xbardat <- data.frame(
x = c(apply(matrix(rexp(nosim*n,lambda),
nosim), 1, mean)
),
size = factor(rep(c(n), rep(nosim, 1))))
XbarMean = mean(Xbardat$x)
Xbarsd = sd(Xbardat$x)
print(c(muexp,XbarMean))
print(c(sdexp,Xbarsd))
nosim <- 1000
n <- 40
Xbardat <- data.frame(
x = c(apply(matrix(rexp(nosim*n,lambda),
nosim), 1, mean)
),
size = factor(rep(c(n), rep(nosim, 1))))
XbarMean = mean(Xbardat$x)
Xbarsd = sd(Xbardat$x)
print(c(muexp,XbarMean))
print(c(sdexp/sqrt(n),Xbarsd))
Xvardat <- data.frame(
x = c(apply(matrix(rexp(nosim*n,lambda),
nosim), 1, var)
),
size = factor(rep(c(n), rep(nosim, 1))))
XvarMean = mean(Xvardat$x)
Xvarsd = sd(Xvardat$x)
print(c(sdexp,XvarMean))
# Do the simulation of the variance of 1000 samples size n=40
Xvardat <- data.frame(
x = c(apply(matrix(rexp(nosim*n,lambda),
nosim), 1, var)
),
size = factor(rep(c(n), rep(nosim, 1))))
XvarMean = mean(Xvardat$x)
Xvarsd = sd(Xvardat$x)
print(c(sdexp,sqrt(XvarMean))
)
Xvardat <- data.frame(
x = c(apply(matrix(rexp(nosim*n,lambda),
nosim), 1, var)
),
size = factor(rep(c(n), rep(nosim, 1))))
XvarMean = mean(Xvardat$x)
print(c(sdexp,sqrt(XvarMean)))
# Asympthotic of the standard deviation
n <- 10000
lambda <- 0.2
sds <- vector(mode="numeric", length=0)
for (i in 1:n) {
sds[i] = sd(rexp(i,rate=lambda))
}
g <- ggplot(data.frame(x = 1 : n, y = sds), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 2)
g <- g + labs(x = "Number of obs", y = "Cumulative std dev")
print(g)
n <- 1000
lambda <- 0.2
means <- cumsum(rexp(n, rate=lambda)) / (1  : n)
g <- ggplot(data.frame(x = 1 : n, y = means), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 2)
g <- g + labs(x = "Number of obs", y = "Cumulative mean")
print(g)
n <- 1000
lambda <- 0.2
sds <- vector(mode="numeric", length=0)
for (i in 1:n) {
sds[i] = sd(rexp(i,rate=lambda))
}
g <- ggplot(data.frame(x = 1 : n, y = sds), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 2)
g <- g + labs(x = "Number of obs", y = "Cumulative std dev")
print(g)
n <- 1000
lambda <- 0.2
means <- cumsum(rexp(n, rate=lambda)) / (1  : n)
g <- ggplot(data.frame(x = 1 : n, y = means), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 1)
g <- g + labs(x = "Number of obs", y = "Cumulative mean")
print(g)
# Asympthotic of the standard deviation
n <- 1000
lambda <- 0.2
sds <- vector(mode="numeric", length=0)
for (i in 1:n) {
sds[i] = sd(rexp(i,rate=lambda))
}
g <- ggplot(data.frame(x = 1 : n, y = sds), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 1)
g <- g + labs(x = "Number of obs", y = "Cumulative std dev")
print(g)
?geom_hline
# Asympthotic of the mean
library(ggplot2)
n <- 1000
lambda <- 0.2
means <- cumsum(rexp(n, rate=lambda)) / (1  : n)
g <- ggplot(data.frame(x = 1 : n, y = means), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 1)
g <- g + geom_hline(yintercept=muexp,color="red",linetype="dashed", size=1.5)
g <- g + labs(x = "Number of obs", y = "Cumulative mean")
print(g)
# Asympthotic of the standard deviation
n <- 1000
lambda <- 0.2
sds <- vector(mode="numeric", length=0)
for (i in 1:n) {
sds[i] = sd(rexp(i,rate=lambda))
}
g <- ggplot(data.frame(x = 1 : n, y = sds), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 1)
g <- g + geom_hline(yintercept=sdexp,color="red",linetype="dashed", size=1.5)
g <- g + labs(x = "Number of obs", y = "Cumulative std dev")
print(g)
n <- 1000
lambda <- 0.2
sds <- vector(mode="numeric", length=0)
for (i in 1:n) {
sds[i] = sd(rexp(i,rate=lambda))
}
g <- ggplot(data.frame(x = 1 : n, y = sds), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 1)
g <- g + geom_hline(yintercept=sdexp,color="red",linetype="dashed", size=1.5)
g <- g + labs(x = "Number of obs", y = "Cumulative std dev")
g <- g + geom_text(aes(n/2, sdexp+.5, label="Pop. sd = ")
print(g)
n <- 1000
lambda <- 0.2
sds <- vector(mode="numeric", length=0)
for (i in 1:n) {
sds[i] = sd(rexp(i,rate=lambda))
}
g <- ggplot(data.frame(x = 1 : n, y = sds), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 1)
g <- g + geom_hline(yintercept=sdexp,color="red",linetype="dashed", size=1.5)
g <- g + labs(x = "Number of obs", y = "Cumulative std dev")
g <- g + geom_text(aes(n/2, sdexp+.5, label="Pop. sd = "))
print(g)
# Asympthotic of the standard deviation
n <- 1000
lambda <- 0.2
sds <- vector(mode="numeric", length=0)
for (i in 1:n) {
sds[i] = sd(rexp(i,rate=lambda))
}
g <- ggplot(data.frame(x = 1 : n, y = sds), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 1)
g <- g + geom_hline(yintercept=sdexp,color="red",linetype="dashed", size=1.5)
g <- g + labs(x = "Number of obs", y = "Cumulative std dev")
g <- g + geom_text(aes(n/2, sdexp+.5, label="Pop. sd = ", color="red"))
print(g)
n <- 1000
lambda <- 0.2
means <- cumsum(rexp(n, rate=lambda)) / (1  : n)
g <- ggplot(data.frame(x = 1 : n, y = means), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 1)
g <- g + geom_hline(yintercept=muexp,color="red",linetype="dashed", size=1.5)
g <- g + labs(x = "Number of obs", y = "Cumulative mean")
g <- g + ggtitle("Asympthotic of Sample Mean to Population Mean")
print(g)
library('r/exercise01.r')
library('./r/exercise01.r')
source('r/exercise01.r')
source('r/exercise01.r')
5/sqrt(40)
library(dataset)
install.packages('dataset')
library(datasets)
data(mtcars)
head(mtcars)
attach(mtcars)
mean(mpg)
sd(mpg)
t.test(mpg)
t.test(mpg)$conf.int
qt(.975,8)
qt(.975,8)/3
c4=mtcars$mpg[mtcars$cyl ==4]
c6=mtcars$mpg[mtcars$cyl ==6]
t.test(c4,c6,var.equal=TRUE)
qt(.975,8)
1100 + c(-1,1)*30/sqrt(9)*qt(.975,8)
6 / qt(.975,8)
?t.test
t.test(c4,c6,var.equal=TRUE)
y1mean=3
y2mean=5
y1var=.6
y2var=.68
n1=10
n2=10
pooledvar=(y1var+y2var)/2
meandif = y1mean-y2mean
tstat = qt(.975,n1+n2-2)
meandif+c(-1,1)*tstat*pooledvar
meandif+c(-1,1)*tstat*sqrt(pooledvar)
meandif+c(-1,1)*tstat*sqrt(pooledvar)*(1/10+1/10)^.5
x1mean=4
x1sd=.5
x2mean=6
x2sd=2
meandif2=x1mean-x2mean
meandif2=x2mean-x1mean
poolsd2 = sqrt((x1sd^2+x2sd^2)/2)
meandif2+c(-1,1)*poolsd2*qnorm(.975)
meandif2+c(-1,1)*poolsd2*qnorm(.975)*(1/100+1/100)^.5
treatedmean=-3
placebomean=1
treatedsd=1.5
placebosd=1.8
ntreated=9
nplacebo=9
tstat = qt(.95,ntreated+nplacebo-2)
poolsd3 = sqrt((treatedsd^2+placebosd^2)/2)
meandif3=treatedmean-placebomean
meandif3+c(-1,1)*tstat*poolsd3*(1/9+1/9)^.5
